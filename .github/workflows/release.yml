name: tag and release

on:
  push:
    branches:
      - main

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Get version
        id: get_version
        run: |
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate new tag
        id: new_tag
        run: |
          CURRENT_VERSION=${{ steps.get_version.outputs.current_version }}
          MAJOR=$(echo $CURRENT_VERSION | cut -d'.' -f1 | tr -d 'v')
          MINOR=$(echo $CURRENT_VERSION | cut -d'.' -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d'.' -f3)
          
          # Get commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          
          # Determine version bump based on conventional commit type
          if [[ $COMMIT_MSG == *"!"* ]]; then
            # Breaking change = major version bump
            NEW_MAJOR=$((MAJOR + 1))
            NEW_MINOR=0
            NEW_PATCH=0
          elif [[ $COMMIT_MSG == feat:* ]]; then
            # New feature = minor version bump
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$((MINOR + 1))
            NEW_PATCH=0
          elif [[ $COMMIT_MSG == fix:* ]] || [[ $COMMIT_MSG == chore:* ]] || [[ $COMMIT_MSG == docs:* ]]; then
            # Bug fix, chore, or docs = patch version bump
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$MINOR
            NEW_PATCH=$((PATCH + 1))
          else
            # Default to patch bump for unknown types
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$MINOR
            NEW_PATCH=$((PATCH + 1))
          fi
          
          NEW_TAG="v${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Create tag
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          git config --local user.email "${{ github.actor }}@users.noreply.github.com"
          git config --local user.name "${{ github.actor }}"
          git tag ${{ steps.new_tag.outputs.new_tag }}
          git push origin ${{ steps.new_tag.outputs.new_tag }}

      - name: Build
        run: |
          VERSION=${{ steps.new_tag.outputs.new_tag }}
          LDFLAGS="-X main.binVersion=${VERSION}"
          GOOS=linux GOARCH=amd64 go build -ldflags "${LDFLAGS}" -o bin/viztruct-linux-amd64 ./cmd/cli
          GOOS=linux GOARCH=arm64 go build -ldflags "${LDFLAGS}" -o bin/viztruct-linux-arm64 ./cmd/cli
          GOOS=darwin GOARCH=amd64 go build -ldflags "${LDFLAGS}" -o bin/viztruct-darwin-amd64 ./cmd/cli
          GOOS=darwin GOARCH=arm64 go build -ldflags "${LDFLAGS}" -o bin/viztruct-darwin-arm64 ./cmd/cli

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.new_tag.outputs.new_tag }}
          files: |
            bin/viztruct-darwin-amd64
            bin/viztruct-darwin-arm64
            bin/viztruct-linux-amd64
            bin/viztruct-linux-arm64
          generate_release_notes: true
          draft: false
          prerelease: false
